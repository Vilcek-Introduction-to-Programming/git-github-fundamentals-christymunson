Rigor & Reproducibility, Fall 2022
Computational Reproducibility I Homework
Due 02 Oct 2022

As a newcomer to computing in scientific research, I have learned that a version control system, like Git, is one tool for tracking and storing changes to the data and software of a project. The ability to retain and retrieve older versions of a project is critical for reproducibility because it is important for the researcher to not only be able to understand her own work at each step of the process, but also to collaborate effectively with others and ensure that others can replicate the findings. As someone who does not have a computational background, but anticipates being the main driver of my own data analysis going forward, I think this moment is a great opportunity to develop good habits regarding computational reproducibility and learn the benefits of working within a version control system to achieve that goal.

Through this assignment, I became familiar with the basic workflow of GitHub, which starts by creating a repository which contains all of a project's files and revision history. I appreciate the feature of "branches," which enables me to isolate my own work and experimentation with code from a larger main project that I might be collaborating with others on. I got some practice using GitHub Desktop as a bridge of sorts between my local environment and the remote main repository on GitHub.com. For example, I edited this text file on my computer and committed the changes on the Desktop, which were then reflected in the main repository online. I also learned the importance of thoughtful READMEs; writing detailed enough descriptions and even providing simple examples of the analysis found in the files is not only useful for explaining to others how to engage with everything in a particular repository, but is useful for myself when I want to go back and understand what I did and why. One thing I am still a bit confused about is basic writing and formatting syntax in Markdown and I see a steeper learning curve for myself with the command line (e.g., GitHub CLI), but I think with more practice, I can become more comfortable with using other "languages" in my research.  

Wilson et al. presents a host of good computing practices that foster computational reproducibility, and GitHub is an ideal platform for implementing more than one of them. Firstly, file organization is key for the success of any project, but one can quickly lose track of the copious amounts of data collected, analysis completed, and results generated. Because of the repository structure of GitHub, all items like text documents, raw data, metadata, and analysis files can be found in one place and organized into various directories. Additionally, as previously described, all changes and edits to those files can be recorded and stored safely. GitHub is also helpful when multiple collaborators are working on the same project because it reduces the risk of overwriting each other's work, streamlines the code sharing process to one location, and allows the owner of the repository (e.g., the lead author of a study) to access and approve all proposed changes/pull requests. GitHub can also be used for writing manuscripts in a plain text format under version control; the advantages of this practice include being able to find and merge differences from concurrent changes by multiple people and commenting on and reviewing such changes. However, this approach requires knowledge of a wider set of tools, such as Git/Markdown/LaTeX, as opposed to other online document platforms considered more accessible, like Google Docs. Nevertheless, adopting Git as a method for retaining all versions a project and sharing it with others both before and after publication promotes the reproducibility of the analysis and results that come from it. 

